model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String?
  imageId           String?       // Reference to Media
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("user")
  image             Media?        @relation(fields: [imageId], references: [id])
  Session            Session[]   
  Account            Account[]   
  notifications      Notification[]
  recentActivities   RecentActivity[]
  assetCategories    AssetCategory[]     // User's custom asset categories
  inventoryCategories InventoryCategory[]  // User's custom inventory categories
  CheckOut CheckOut[]
}

model AssetCategory {
  id          String   @id @default(cuid())
  name        String   // e.g., "Electronics", "Furniture"
  description String?  // Optional description of the category
  userId      String   // Reference to User
  user        User     @relation(fields: [userId], references: [id])

  assets      Asset[]  // Relation to Asset model
}

model InventoryCategory {
  id          String   @id @default(cuid())
  name        String   // e.g., "Office Supplies", "Hardware"
  description String?  // Optional description of the category
  userId      String   // Reference to User
  user        User     @relation(fields: [userId], references: [id])

  items       InventoryItem[]  // Relation to InventoryItem model
}

model AssetType {
  id          String   @id @default(cuid())
  name        String   // e.g., "MacBook Pro 16"
  description String?  // Optional description of the asset type
  imageId     String?  // Reference to Media
  image       Media?   @relation(fields: [imageId], references: [id])
  
  assets      Asset[]  // Relation to Asset model
}

model Asset {
  id            String      @id @default(cuid())
  serialNumber  String      @unique
  categoryId    String      // Reference to AssetCategory
  typeId        String      // Reference to AssetType
  purchaseDate  DateTime
  status        AssetStatus
  type          AssetType   @relation(fields: [typeId], references: [id])
  category      AssetCategory @relation(fields: [categoryId], references: [id])

  // Relationships
  checkOuts     CheckOut[]  
  maintenance   Maintenance[]
  notifications Notification[]
  recentActivities RecentActivity[]
}

model InventoryItem {
  id                String      @id @default(cuid())
  name              String
  categoryId        String      // Reference to InventoryCategory
  quantity          Int
  lowStockThreshold Int
  imageId           String?     // Reference to Media
  image             Media?      @relation(fields: [imageId], references: [id])
  
  // Relationships
  logs              InventoryLog[]
  notifications     Notification[]
  recentActivities  RecentActivity[]
  category          InventoryCategory @relation(fields: [categoryId], references: [id])
}

model Maintenance {
  id               String      @id @default(cuid())
  assetId          String
  performedBy      String
  description      String
  maintenanceDate  DateTime
  nextMaintenance  DateTime?
  cost             Float
  asset            Asset       @relation(fields: [assetId], references: [id])
  recentActivities RecentActivity[]
}

model CheckOut {
  id               String      @id @default(cuid())
  userId           String
  assetId          String
  checkOutDate     DateTime
  checkInDate      DateTime?
  dueDate          DateTime
  status           CheckOutStatus
  user             User        @relation(fields: [userId], references: [id])
  asset            Asset       @relation(fields: [assetId], references: [id])
  recentActivities RecentActivity[]
}

model RecentActivity {
  id              String      @id @default(cuid())
  userId          String      
  assetId         String?     
  inventoryId     String?     
  actionType      ActionType
  actionDate      DateTime    @default(now())
  description     String
  user            User        @relation(fields: [userId], references: [id])
  asset           Asset?      @relation(fields: [assetId], references: [id])
  inventoryItem   InventoryItem? @relation(fields: [inventoryId], references: [id])

  InventoryLog InventoryLog[]

  CheckOut CheckOut[]

  Maintenance Maintenance[]
}

model InventoryLog {
  id                String      @id @default(cuid())
  inventoryItemId   String
  action            InventoryAction
  quantity          Int
  description       String
  date              DateTime    @default(now())
  inventoryItem     InventoryItem @relation(fields: [inventoryItemId], references: [id])
  recentActivities   RecentActivity[]
}

model Notification {
  id                String      @id @default(cuid())
  userId            String     
  assetId           String?
  inventoryId       String?
  message           String
  type              NotificationType
  read              Boolean
  sentAt            DateTime    @default(now())
  user              User        @relation(fields: [userId], references: [id])
  asset             Asset?      @relation(fields: [assetId], references: [id])
  inventoryItem     InventoryItem? @relation(fields: [inventoryId], references: [id])
}

model Media {
  id                String      @id @default(cuid())
  url               String      // URL of the image
  type              String      // e.g., 'image/png', 'image/jpeg'
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  InventoryItem InventoryItem[]

  AssetType AssetType[]

  User User[]
}

enum ActionType {
  CHECKOUT
  CHECKIN
  MAINTENANCE_SCHEDULED
  MAINTENANCE_COMPLETED
  INVENTORY_ADDED
  INVENTORY_REMOVED
  ASSET_CREATED
  ASSET_UPDATED
}

enum InventoryAction {
  ADDED
  CONSUMED
  REMOVED
}

enum NotificationType {
  ASSET_CHECKOUT_REMINDER
  LOW_INVENTORY_ALERT
  MAINTENANCE_REMINDER
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum AssetStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  DECOMMISSIONED
}

enum CheckOutStatus {
  CHECKED_OUT
  CHECKED_IN
  OVERDUE
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}
